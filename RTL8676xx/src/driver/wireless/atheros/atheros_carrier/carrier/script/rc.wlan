#!/bin/sh
####################################################################
#
# WLAN Initialization script
#
# This script will initialize the wlan modules required for operation
# of the AP hardware.  There are several environmental variables that
# can be set to modify the operation of the AP.  These are set to
# default values (or not used) if not defined.  Parameters are:
#
#  DFS_domainoverride   0=Unitialized (default),
#                       1=FCC Domain (FCC3, US)
#                       2=ETSI Domain (Europe)
#                       3=Japan Domain
#  DFS_usenol           1=Use channel NOL (default)
#  ATH_countrycode      Set Country Code (  Override the use of channel NOL
#                       Override default country code (-1 auto, default)
#                       Use country code 0x1ff for demo channels
#  ATH_outdoor          0=Disable (default)
#                       1=Enable
#  ATH_xchanmode        0=Disable Extended Channels
#                       1=Enable Extended Channels (default)
#  ATH_use_eeprom       0=Use Flash for Calibration Data (default)
#                       1=Use EEPROM for Calibratin Data
#  ATH_debug            Load time debug flags, 0x00000000 default
#
#  PKTLOG_interfaces    List of colon separated interfaces for pktlog
###################################################################
. /etc/ath/apcfg

KVER=`uname -r | cut -f 1 -d '-'`
MODULE_PATH=/lib/modules/$KVER/net

###################################################################
## The input parameter is either up or down.  We assume that
## if no argument is provided, UP is intended
###################################################################


if [ $1 != down ]; then
    #
    # Calculate the parameter values required.  Add the appropriate settings
    # to the strings
    #
    
    DFS_ARGS=""
    if [ "${DFS_domainoverride}" != "" ]; then
        DFS_ARGS="domainoverride=$DFS_domainoverride $DFS_ARGS"
    fi
    if [ "${DFS_usenol}" != "" ]; then
        DFS_ARGS="usenol=$DFS_usenol $DFS_ARGS"
    fi

    #
    # PCI Args
    #

    PCI_ARGS=""
    if [ "$ATH_countrycode" != "" ]; then
        PCI_ARGS="countrycode=$ATH_countrycode $PCI_ARGS"
    fi
    if [ "$ATH_outdoor" != "" ]; then
        PCI_ARGS="outdoor=$ATH_outdoor $PCI_ARGS"
    fi
    if [ "$ATH_xchanmode" != "" ]; then
        PCI_ARGS="xchanmode=$ATH_xchanmode $PCI_ARGS"
    fi
    if [ "${ATH_use_eeprom}" != "" ]; then
        PCI_ARGS="use_eeprom=$ATH_use_eeprom $PCI_ARGS"
    fi

    if [ "$ATH_debug" != "" ]; then
        PCI_ARGS="ath_debug=$ATH_debug $PCI_ARGS"
    fi

    #
    # pktlog args
    #
    PKTLOG_ARGS=""
    if [ "$PKTLOG_interfaces" != "" ]; then
        PKTLOG_ARGS="interfaces=$PKTLOG_interfaces $PKTLOG_ARGS"
    fi
 
    # For legacy driver load  
    if [ "${AP_STARTMODE}" = "dual_legacy" -o "${AP_STARTMODE}" = "dual_11n_legacy" -o "${AP_STARTMODE}" = "single_legacy" -o "${AP_STARTMODE}" = "rootaplegacy" -o "${AP_STARTMODE}" = "repeaterlegacy" -o "${AP_STARTMODE}" = "clientlegacy" -o "${AP_STARTMODE}" = "multilegacy" ]; then
        PCI_A=$PCI_ARGS
        # Load legacy driver if GN_MERGE disable. 
        # In dual_11n_legacy mode with GN_MERGE enable, would load driver later.  
        # So we don't need to load the same driver twice.  
        if [ "${GN_MERGE}" != "y" ]; then
            export MOD_TO_LOAD=11g
    	      . /etc/init.d/insert_modules
        elif [ "${AP_STARTMODE}" != "dual_11n_legacy" ]; then
            DFS_A=$DFS_ARGS 
            PKTLOG_A=$PKTLOG_ARGS
            export MOD_TO_LOAD=11n	
    	      . /etc/init.d/insert_modules
        fi
    fi
   	# For 11n driver load 
    if [ "${AP_STARTMODE}" = "dual_11n" -o "${AP_STARTMODE}" = "dual_11n_legacy" -o "${AP_STARTMODE}" = "single_11n" -o "${AP_STARTMODE}" = "rootap11n" -o "${AP_STARTMODE}" = "repeater11n" -o "${AP_STARTMODE}" = "client11n" -o "${AP_STARTMODE}" = "multi11n" -o "${AP_STARTMODE}" = "ethersta_11n" ]; then
        PCI_A=$PCI_ARGS 
        DFS_A=$DFS_ARGS 
        PKTLOG_A=$PKTLOG_ARGS
        export MOD_TO_LOAD=	
        . /etc/init.d/insert_modules 
    fi
   	 
else
#
# First, check to see if all of the VAPs have been eliminated
# If not, kill them all.  Don't continue, since this script
# will be called by killVAP all
#

    APS=`iwconfig | grep ath`

    if [ "${APS}" != "" ]; then
        /etc/ath/killVAP all

        #
        # We exit here since the above script will call this script
        # to delete all modules
        #

        exit
    fi
    # For 11n driver unloading
    if [ "${AP_STARTMODE}" = "dual_11n" -o "${AP_STARTMODE}" = "dual_11n_legacy" -o "${AP_STARTMODE}" = "single_11n" -o "${AP_STARTMODE}" = "rootap11n" -o "${AP_STARTMODE}" = "repeater11n" -o "${AP_STARTMODE}" = "client11n" -o "${AP_STARTMODE}" = "multi11n" -o "${AP_STARTMODE}" = "ethersta_11n" ]; then
    	rmmod wlan_scan_ap
    	rmmod wlan_scan_sta
    	rmmod ath_pktlog
    	sleep 2
   	rmmod wlan_acl
    	rmmod wlan_wep
    	rmmod wlan_tkip
    	rmmod wlan_ccmp
    	rmmod wlan_xauth
    	sleep 2
    	rmmod ath_pci
    	sleep 2
    	rmmod ath_rate_atheros
    	rmmod wlan
    	rmmod ath_dfs
    	rmmod ath_hal
    	sleep 2
    	# Let's try WEP/WLAN one more time to be sure
    	#
    	sleep 1
    	rmmod wlan_wep
    	rmmod wlan

    fi
    
    
    # For legacy driver unloading
    if [ "${AP_STARTMODE}" = "dual_legacy" -o "${AP_STARTMODE}" = "dual_11n_legacy" -o "${AP_STARTMODE}" = "single_legacy" -o "${AP_STARTMODE}" = "rootaplegacy" -o "${AP_STARTMODE}" = "repeaterlegacy" -o "${AP_STARTMODE}" = "clientlegacy" -o "${AP_STARTMODE}" = "multilegacy" ]; then
        # Unload legacy driver if GN_MERGE disable. 
        # In dual_11n_legacy mode with GN_MERGE enable,
        # driver has been unloaded in 11n driver unloading procedure 
        # So we don't need to unload the same driver twice.  
        if [ "${GN_MERGE}" != "y" ]; then
            sleep 1
            rmmod wlan_scan_ap11g
            rmmod wlan_scan_sta11g
            sleep 2
            rmmod wlan_acl11g
            rmmod wlan_wep11g
            rmmod wlan_tkip11g
            rmmod wlan_ccmp11g
            rmmod wlan_xauth11g
            sleep 2
            rmmod ath_pci11g
            sleep 2
            rmmod ath_rate_atheros11g
            rmmod ath_hal11g
            rmmod wlan11g
            rmmod ath_dfs11g
        elif [ "${AP_STARTMODE}" != "dual_11n_legacy" ]; then
            rmmod wlan_scan_ap
            rmmod wlan_scan_sta
            rmmod ath_pktlog
            sleep 2
            rmmod wlan_acl
            rmmod wlan_wep
            rmmod wlan_tkip
            rmmod wlan_ccmp
            rmmod wlan_xauth
            sleep 2
            rmmod ath_pci
            sleep 2
            rmmod ath_rate_atheros
            rmmod wlan
            rmmod ath_dfs
            rmmod ath_hal
            sleep 2
            # Let's try WEP/WLAN one more time to be sure
            #
            sleep 1
            rmmod wlan_wep
            rmmod wlan
        fi
    fi
    
    #
fi
