###################################################################################
##  apcfg
##
##  Configuration file for Atheros AP.
##  All settings that affect the operation of the AP are included in this file.  For
##  those settings not define here, defaults are used.  This file should be used in
##  lieu of manual configuration.
##
###################################################################################
##
## Network Address Selection
## Selects between DHCP or a static fixed address
##
## AP_IPADDR  = IP address of the bridge
## WAN_IPADDR = Fixed IP address of the WAN, if it's not bridged
## WAN_MODE   = bridged for attached to bridged, Get address if dhcp, fixed address
##              if static
##
###################################################################################

export AP_IPADDR=192.168.1.2
export AP_NETMASK=255.255.255.0
export WAN_MODE=bridged
export WAN_IPADDR=192.168.2.1

#
# Indicate if you want the WLAN to be activated on boot up.
#

export WLAN_ON_BOOT=n

#
# AP Start Mode
# This can be overridded by environmental variables
# Modes can be
# dual_11n       := dual concurrent 11na, 11ng
# dual_legacy    := dual concurrent for legacy(11a or 11g) AP
# single_11n     := standard single 11n AP 
# single_legacy  := standard single legacy(11a or 11g) AP
# dual_11n_legacy:= dual concurrent (11na, 11ng) + (11a, 11g)
# rootap11n      := WDS 11n root AP for WDS modes 
# rootaplegacy   := WDS legacy root AP for WDS modes
# repeater11n    := WDS 11n repeater station
# repeaterlegacy := WDS legacy repeater station
# client11n      := WDS 11n "virtual wire" client
# clientlegacy   := WDS legacy "virtual wire" client
# multi11n       := Multiple 11n BSSID with all encryption types
# multilegacy    := Multiple legacy BSSID with all encryption types
# ethersta_11n   := 11n station for ether dongle mode
#

if [ "${AP_STARTMODE}" = "" ]; then
    export AP_STARTMODE=single_11n
fi

#
# GN_MERGE only support after carrier 1.3 release. So check driver version first
#
DVER=`uname -r | cut -f 4 -d '-' | cut -b 1-4`
if [ "$DVER" = "1.2." ]; then
    # Must disable GN_MERGE if driver version early than 1.3
    export GN_MERGE=n
else
    # Enable GN_MERGE if driver version after 1.3
    export GN_MERGE=y
    # Find out all Atheros Wireless Device in PCI Bus
    DEVLIST=`cat /proc/bus/pci/devices | cut -f 2 | grep 168c*`
    DEVCOUNT=0
    SLOTNUM=0
    for i in $DEVLIST; do
        DEVCOUNT=$((DEVCOUNT + 1))
    done
    # If more than one device
    if [ "$DEVCOUNT" = "2" ]; then
        for i in $DEVLIST; do
            DEVID=`expr substr $i 5 4`
            # Check 11n device in which slot
            # And decide to create interface in device wifi1 or not if only run one device
            if [ "$DEVID" = "0023" -o "$DEVID" = "0024" -o "$DEVID" = "0027" -o "$DEVID" = "0029" ]; then
                if [ "$SLOTNUM" = "0" ]; then
                    export SLOT0_11N=y
                    if [ "${AP_STARTMODE}" = "single_legacy" -o "${AP_STARTMODE}" = "rootaplegacy" -o "${AP_STARTMODE}" = "repeaterlegacy" -o "${AP_STARTMODE}" = "clientlegacy" -o "${AP_STARTMODE}" = "multilegacy" ]; then
                        export WIFI1_USE=y
                    fi
                elif [ "$SLOTNUM" = "1" ]; then
                    if [ "${AP_STARTMODE}" = "single_11n" -o "${AP_STARTMODE}" = "rootap11n" -o "${AP_STARTMODE}" = "repeater11n" -o "${AP_STARTMODE}" = "client11n" -o "${AP_STARTMODE}" = "multi11n" ]; then
                        if [ "${SLOT0_11N}" != "y" ]; then
                            export WIFI1_USE=y
                        fi
                    fi
                fi
            fi
            SLOTNUM=$((SLOTNUM + 1))
        done
    elif [ "$DEVCOUNT" = "1" ]; then
        if [ "${AP_STARTMODE}" = "dual_11n_legacy" ]; then
            for i in $DEVLIST; do
                DEVID=`expr substr $i 5 4`
                # Check if 11n device exists
                # If yes, skip the create of legacy interface
                if [ "$DEVID" = "0023" -o "$DEVID" = "0024" -o "$DEVID" = "0027" -o "$DEVID" = "0029" ]; then
                    export LEGACY_SKIP=y
                fi
            done
        fi
    fi
fi

#################################################################################
## Default Parameters
## If these are not set explictly by exporting environmental variables, the following
## Defaults will be applied
#################################################################################
     # Default channel For single legacy modes
if [ "${AP_STARTMODE}" = "single_legacy" -o "${AP_STARTMODE}" = "rootaplegacy" -o "${AP_STARTMODE}" = "repeaterlegacy" -o "${AP_STARTMODE}" = "clientlegacy" -o "${AP_STARTMODE}" = "multilegacy" ]; then
    if [ "${AP_PRIMARY_CH}" = "" ]; then
         # AP_PRIMARY_CH could be
         #                a number or
         #                11a (which means auto-scan in 11a mode) or
         #                11g (which means auto-scan in 11g mode)
         export AP_PRIMARY_CH=6
    fi
else
    RF_VAL=RF 
fi	

     # For 11n standalone or 11n+legacy dual
     # Default channel for 11n AP when operated in 11n standalone or 11n+legacy dual, 
     # The default channel for legacy AP when operated in 11n+legacy dual mode is assigned by AP_PRIMARY_CH_LEG
     # The extension channel of 11n AP, please use AP_SECONDARY_CH
if [ "${AP_PRIMARY_CH}" = "" ]; then
    # AP_PRIMARY_CH could be
    #                a number or
    #                11na (which means auto-scan in 11na mode) or
    #                11ng (which means auto-scan in 11ng mode)

    export AP_PRIMARY_CH=40
fi
    # Default channel For 11n dual mode. Use with AP_SECONDARY_CH_11N_1 and AP_SECONDARY_CH_11N_2
if [ "${AP_PRIMARY_CH_11N_1}" = "" ]; then
    # AP_PRIMARY_CH_11N_x could be
    #                a number or
    #                11na (which means auto-scan in 11na mode) or
    #                11ng (which means auto-scan in 11ng mode)
    export AP_PRIMARY_CH_11N_1=6
    export AP_PRIMARY_CH_11N_2=44
fi

    # Default channel For legacy dual mode (could be 2.4G or 5G band)
if [ "${AP_PRIMARY_CH_LEG_1}" = "" ]; then
    # AP_PRIMARY_CH_LEG_x could be
    #                a number or
    #                11a (which means auto-scan in 11a mode) or
    #                11g (which means auto-scan in 11g mode)
    export AP_PRIMARY_CH_LEG_1=6
    export AP_PRIMARY_CH_LEG_2=11
fi

    # Default Channel for legacy AP in 11n+legacy dual mode, for 11n AP, use AP_PRIMARY_CH as default channel.
if [ "${AP_PRIMARY_CH_LEG}" = "" ]; then
    # AP_PRIMARY_CH_LEG could be
    #                a number or
    #                11a (which means auto-scan in 11a mode) or
    #                11g (which means auto-scan in 11g mode)
    export AP_PRIMARY_CH_LEG=6
fi
    # Default extension channel For 11n dual mode. Negative means use less channel number as extension channel.
if [ "${AP_SECONDARY_CH_11N_1}" = "" ]; then
    # AP_SECONDARY_CH may not be negative for channels 1 to 4.
    export AP_SECONDARY_CH_11N_1=-1
    export AP_SECONDARY_CH_11N_2=1
fi

    # Default extension channel for 11n standalone or 11n+legacy dual.
if [ "${AP_SECONDARY_CH}" = "" ]; then
    # AP_SECONDARY_CH may not be negative for channels 1 to 4.
    export AP_SECONDARY_CH=-1
fi

##
## Set the default interfaces if not already defined
##

if [ "${AP_IFNUM_DC_11N}" = "" ]; then
    if [ "${SLOT0_11N}" = "y" -o "${LEGACY_SKIP}" = "y" ]; then                                           
        export AP_IFNUM_DC_11N=0:RF:$AP_PRIMARY_CH:$AP_SECONDARY_CH                   
    else                                                                              
        export AP_IFNUM_DC_11N=1:RF:$AP_PRIMARY_CH:$AP_SECONDARY_CH                   
    fi                                                                                
fi

if [ "${AP_IFNUM_DC_11N_1}" = "" ]; then
    export AP_IFNUM_DC_11N_1=0:RF:$AP_PRIMARY_CH_11N_1:$AP_SECONDARY_CH_11N_1
fi

if [ "${AP_IFNUM_DC_11N_2}" = "" ]; then
    export AP_IFNUM_DC_11N_2=1:RF:$AP_PRIMARY_CH_11N_2:$AP_SECONDARY_CH_11N_2
fi

if [ "${AP_IFNUM_DC_LEG_1}" = "" ]; then
    export AP_IFNUM_DC_LEG_1=0::$AP_PRIMARY_CH_LEG_1::
fi

if [ "${AP_IFNUM_DC_LEG_2}" = "" ]; then
    export AP_IFNUM_DC_LEG_2=1::$AP_PRIMARY_CH_LEG_2::
fi

if [ "${AP_IFNUM_DC_LEG}" = "" ]; then
    if [ "${SLOT0_11N}" = "y" ]; then                                 
        export AP_IFNUM_DC_LEG=1::$AP_PRIMARY_CH_LEG::                          
    else                                                                                         
        export AP_IFNUM_DC_LEG=0::$AP_PRIMARY_CH_LEG::                          
    fi                                                                               
fi 
    
if [ "${AP_IFNUM}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM=1:$RF_VAL:$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM=0:$RF_VAL:$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

if [ "${AP_IFNUM_2}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM_2=1::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM_2=0::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

if [ "${AP_IFNUM_3}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM_3=1::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM_3=0::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

if [ "${AP_IFNUM_4}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM_4=1::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM_4=0::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

if [ "${AP_IFNUM_5}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM_5=1::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM_5=0::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

if [ "${AP_IFNUM_6}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM_6=1::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM_6=0::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

if [ "${AP_IFNUM_7}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM_7=1::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM_7=0::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

if [ "${AP_IFNUM_8}" = "" ]; then
    if [ "${WIFI1_USE}" = "y" ]; then                                 
        export AP_IFNUM_8=1::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    else                                                                                         
        export AP_IFNUM_8=0::$AP_PRIMARY_CH:$AP_SECONDARY_CH
    fi                                                                               
fi

##
## Set the default modes for multi configuration
##

if [ "${AP_MODE}" = "" ]; then
    export AP_MODE=ap
fi

if [ "${AP_MODE_2}" = "" ]; then
    export AP_MODE_2=ap
fi

if [ "${AP_MODE_3}" = "" ]; then
    export AP_MODE_3=ap
fi

if [ "${AP_MODE_4}" = "" ]; then
    export AP_MODE_4=ap
fi

if [ "${AP_MODE_5}" = "" ]; then
    export AP_MODE_5=ap
fi

if [ "${AP_MODE_6}" = "" ]; then
    export AP_MODE_6=ap
fi

if [ "${AP_MODE_7}" = "" ]; then
    export AP_MODE_7=ap
fi

if [ "${AP_MODE_8}" = "" ]; then
    export AP_MODE_8=ap
fi
##
## Channel Configuration Section
##

if [ "${TXQUEUELEN}" = "" ]; then
    export TXQUEUELEN=1000
fi

if [ "${SHORTGI}" = "" ]; then
    export SHORTGI=1
fi

#
# Aggregation.  First parameter enables/disables,
# second parameter sets the size limit
#

if [ "${AMPDU}" = "" ]; then
    export AMPDU=1
fi

if [ "${AMPDULIMIT}" = "" ]; then
    export AMPDULIMIT=50000
fi

if [ "${CWMMODE}" = "" ]; then
    export CWMMODE=1
fi

if [ "${RATECTL}" = "" ]; then
    export RATECTL=auto
fi

if [ "${MANRATE}" = "" ]; then
    export MANRATE=0x8c8c8c8c
fi

if [ "${MANRETRIES}" = "" ]; then
    export MANRETRIES=0x04040404
fi

if [ "${RX_CHAINMASK}" = "" ]; then
    export RX_CHAINMASK=7
fi

if [ "${TX_CHAINMASK}" = "" ]; then
    export TX_CHAINMASK=5
fi

# 1 => set ETHERMAC address manually
# 2 => learning mode
if [ "${ETHERDONGLE}" = "" ]; then
    export ETHERDONGLE=1
fi

#if [ "${ETHERMAC}" = "" ]; then
#    export ETHERMAC=00:11:22:33:44:55
#fi

##
## AP Identification Section
##

if [ "${AP_SSID}" = "" ]; then
    export AP_SSID=Atheros_XSpan
fi

#####################################################################################
## The following parameters are board specific, and should not be modified
#####################################################################################

export ATH_use_eeprom=1
## Peter Meng comment it for WDS at 2007-07-15
##if [ -e ./vapnum ]; then
##	export VAPNUM=`cat vapnum`
##else
##	export VAPNUM=0
##fi
if [ "${VAP_INDEX}" = "" ]; then
	export VAPNUM=0
else
	export VAPNUM="${VAP_INDEX}"
fi
